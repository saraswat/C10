C10 syntax and informal semantic
Vijay Saraswat
Last update Wed Sep 17 05:40:25 EDT 2014

\section{Desiderata}
C10 is a logic language with equality, and user-defined constraints, agents and goals.

From a syntax point of view, the language is like that of Prolog with
the following major changes:

  (a) Object-orientation -- a program is made up of a number of class
      and interface declarations, organized in packages. Each class
      defines (static or instance) fields,  methods and
      constructors. Method definitions may be abstract, overloaded and
      overriding. An interface defines abstract methods; classes
      implement interfaces. Classes realize a single-inheritance
      hierachy but may implement multiple interfaces.   

      Methods and fields may be static or instance.

      TODO: Determine if traits are worth introducing.

  (b) Strong typing: All expresions have a compile-time type. The
      compiler checks that only operations permitted by the type are
      performed on an expression. 

  (c) A distinction is made between the syntactic categories of
      agents, goals and constraints. (Prolog permits only goals.) This 
      reflects the basis of C10 in a richer subset of logic than
      definite clauses. Users may define symbols in all these categories. 

A compilation unit is either a class definition, a struct definition,
an interface definiton or a type definition.

Classes, structs and interfaces are container types -- their bodies
contain constructors, and static or instance type, field, method and
function definitions.

TYPE definitions

  <TypeDef> ::= 
    [ <TypeQualifier> ] type <Name> [ '[' <TypeParamList> ']' ] [ '(' <ArgList> ')' ] = <Type> '.'

  <TypeQualifier> ::= static

  <Type> ::= <UnitName> | <Type>{ <Constraint> }

FIELD definitions 

  <FieldDef> ::= [ <FieldQualifier> ] val <Name> [ ':' <Type> ] [ '=' <Term> ] '.'

PREDICATE and FUNCTION definitions

Predicate and function methods are declared thus. 

<MethodDefKind> ::= constraint | agent | goal | def
<Qualifiers> ::= private | protected | local | abstract | static

(local is package-local; default is public)

  <Qualifiers> <MethodDefKind> <Name> [ '(' <ArgList> ')' ] 
    ['{' <Constraint> '}' ] [ ':' <Type> ] { <Body> }

  <Qualifiers> <MethodDefKind> <Name> [ '(' <ArgList> ')' ] 
    ['{' <Constraint> '}' ] [ ':' <Type> ] = <Term> '.'

  <Qualifiers> <MethodDefKind> <Name> [ '(' <ArgList> ')' ]  '.'

The <Body> is <Constraint>, <Goal>, <Agent>, <Neutral> if
<MethodDefKind> is constraint, agent, goal or def respectively. 

Methods are of four kinds -- constraint methods, goal methods and
agent methods and neutral, declared respectively with the
constraint, goal, agent and def keywords. The body of a constraint
method must be a constraint (or invocation of a user-specified
constraint). (Recursion is allowed.) The body of a goal method must be
a goal, and of an agent method an agent. 

Neutral methods may be used on either side of the sequent. They are
convenient to use in those cases in which the programmer can express
what s/he wants in a syntax that is common to agents and goals. Thus, 
neutral methods must statically satisfy the condition that they can be 
used on both sides of the sequent. Specifically, in any if Q S statement in
the body of a neutral method, Q and S must lie in the 
intersection of the syntax for goals and agents, i.e. Q must be  a
(possibly disjunctive or conjunctive) combination of constraints or
invocations of constraint or neutral methods. Since we structurally
remove identity from our set of axioms we cannot logically get
deductions that are incompatible with the operational interpretation
of atoms as recursive calls. 

Each of these kinds of methods are either predicate methods (first
kind of definition above) or function methods (second kind). The third
kind of definition is used for declarations (such as abstract
declarations) that do not have a body. 

For predicate constraint (goal) methods the return type for method
definitions must be Constraint (Goal). Usually there is no reason for
the programmer to specify this. However, for agent methods the return
type may be Agent or Offers[T]. Agent definitions with return type
Offers[T] are said to be collector definitions. 

Function methods permit functions to be defined. The
only difference between predicate and function methods is that
functional notation (nesting) can be used to compose terms built from
function names. During compilation nested functional terms are
flattened with new variables used to represent the result of function
application, e.g. 
    
   Two=add(mult(A,B)) ==> M=mult(A,B), Two=add(M)


<Term> ::= <Var>
        | [ <Primary> '.' ] <Fun> '(' <TermList> ')'
        | 'new' <ClassName> '(' <TermList> ')'
        | <Var> [ ':' <Type> ] where <Constraint> % only in a Constraint context
        | <Var> [ ':' <Type> ] where <Goal>       % only in a Goal context
        | <Var> [ ':' <Type> ] where <Agent>      % only in an Agent context
        | (<ArgList>){<Goal>} => <Term>


 <Constraint> ::= 
         | <ConstraintName> [ '(' <TermList> ')' ]
         | <Primary> '.' <ConstraintName> [ '(' <TermList> ')' ]
         | '(' <Constraint> ')'
         | <Constraint> ',' <Constraint>
         | <Constraint> ';' <Constraint>
         | some(<ArgList>) <Constraint>

 <Goal> ::= <Constraint>
         | <Primary> '.' <Goal+Name> [ '(' <TermList> ')' ]
         | '(' <Goal> ')'
         | <Goal> ',' <Goal>
         | <Goal> ';' <Goal>
         | if (<Agent>) <Goal>
         | some(<ArgList>) <Goal>
         | all(<ArgList>) <Goal>

 <Agent> ::= <Constraint>
         | [ <Primary> '.' ] <Agent+Name> [ '(' <TermList> ')' ]
         | '(' <Agent> ')'
         | <Agent> ',' <Agent>
         | <Agent> ';' <Agent>
         | if (<Goal>) <Agent> [ else <Agent> ]
         | some(<ArgList>) <Agent>
         | all(<ArgList>) <Agent>

         | offer <AgentTerm> [ groupby <AgentTerm> ]

         | next <Agent>
         | hence <Agent>
         | always <Agent>

 <Neutral> ::= <Constraint>
         | [ <Primary> '.' ] <NeutralName> [ '(' <TermList> ')' ]
         | '(' <Neutral> ')'
         | <Neutral> ',' <Neutral>
         | <Neutral> ';' <Neutral>
         | if (<Neutral>) <Neutral> 
         | some(<ArgList>) <Neutral>
         | all(<ArgList>) <Neutral>

<Goal+Name> ::= <GoalName> | <NeutralName>
<Agent+Name> ::= <AgentName> | <NeutralName>

<Primary> ::= <ClassName> | <Term>

<ArgDecl> ::= <Var> [ ':' <Type> ] 

<ArgDeclList> ::= <ArgDecl> | <ArgDecl> ',' <ArgDeclList>

CONSTRUCTOR definitions

TBD: Nothing new here, just as in X10. The body must be neutral. 


TBD: operator definitions, import definitions. 

Additional Static Semantics Rules
(over what X10 already provides)

  * In (x:T) where A, x is a binding occurrence. If the type T can be inferred 
   from the occurrences of x in A, this term may be written as (x) where A.

  * The type T of an agent definition is either Agent or Offers[S], for some type S. 

    The type of the agent c is Agent.

    The type of if (c) A is U, if the type of A is U, 

    The type of {A1, ..., An} is Offers[U] where U, is the lub of all types 
    T such that there is an Ai of type Offers[T], provided that the lub exists.

    The type of the agent offer e is Offers[S] if the type of e is S. 

    The type of offer e1 groupby e2 is Offers[GroupBy[S,T]] if the type of e1 is S 
    and the type of e2 is T. 

    Note: Offer and GroupBy are covariant in their arguments. The lub of Offer[T] 
    and Offer[S] is Offer[U] if U is the lub of S and T. The lub of 
    Offer[GroupBy[S0,T0]] and Offer[GroupBy[S1,T1]] is Offer[GroupBy[S,T]] where
    S is the lub of S0 and S1 and T is the lub of T0 and T1.

    The type of some(x1:T1,...,xn:Tn) A and all(x1:T1,..., xn:Tn) is the type of A.

  * Goals do not support offers. All goals have type Goal.

  * Constraints do not support offers. All constraints have type Constraint.

  * The agents A in the body of an agent definition of type T must have type Agent or
    Offers[T] for some type T <: S,

  * The type of collect is [T](Offers[T])=>Set[T]. That is, collect A is well-typed only 
    if A is of type Offers[T] (for some T), and then the type of collect A is Set[T].

  * Goal terms may only invoke Goal functions. 

Operational Semantics: Agents

  * The agent c tells c to the store.

  * The agent if (G) A asks the query G, and if it succeeds, reduces to A

  * The agent {A1,..., An} is a parallel composition or conjunction of the Ai.

  * The agent offer e offers the value e to the context. It should be executed 
    in the dynamic scope of a collector of the right type (i.e. Offer[T] where 
    S <: T, S the type of e). The static semantic rules guarantee this.

  * The agent offer e groupby f offers the value e with the key f. It should be 
    executed in the dynamic scope of a collector of the right type (i.e. 
    Offer[GroupBy[S,T]],  where the type of e is S' and f is T' and S' <: S, and
    T' <: T). The static semantics rules guarantee this.
   
 * The agent a(e1,..., en) is a (possibly recursive) invocation of a user-defined agent.

 * The agent some(x1:T1, ..., xn:Tn) A augments the store with fresh unconstrained logical 
   variables, and executes A. 

 * The agent all(x1:T1, ..., xn:Tn) A enumerates the values of the types T1,...,Tn,
   binding them to x1,..., xn respectively, and executes A for each such binding.
   This will loop if any of the Ti are infinite.

Operational Semantics: Goals

  * The goal c succeeds if the current store entails c.

  * The goal if (A) G succeeds if the current configuration, augmented with the 
    agent A passes the test G.

  * The goal {A1,..., An} succeeds if each of the goals Ai succeed.

  * The goal p(e1,..., en) is a (possibly recursive) invocation of a user-defined goal.

  * The goal some(x1:T1, ..., xn:Tn) G succeeds if for some consistent constraint c
    in the variables x1, ..., xn, {c,G} succeeds.

  * The goal all(x1:T1, ..., xn:Tn) G succeeds if the goal G succeeds, where each
    xi has been replaced with a fresh unbound variable of type Ti.

OO structure
The user defines units -- classes, structs and interfaces -- as in X10. The bodies 
of units are as in X10. TBD: Consider adding traits rather than interfaces. 


EXAMPLE CODE

The class Set is defined with various operators and static methods.

public class Set[T] {
  public static type a[T](s:Set[T])=T{self in s}.

  public static def singleton[T](t:T)                    =collect offer t.
  public static native def collect[T](a:Offers[T]):Set[T].

  public operator this * (o:Set[T])=collect all(b:a[T](this)) if (some(c:a[T](y))b=c) offer b.
  public operator this + (o:Set[T])=collect {all(x:a[T](this)) offer x, all(x:a[T](o)) offer y}.
  public operator this - (o:Set[T])=collect all(x:a[T](this)) if (all(y:a[T](o))x !=y) offer x.
  public def select[S](f:(T,S)=>S, zero:T):S = this as List[T].select(f,zero).

}

public class List[T] {
   public def select[S](f:(T,S)=>S, zero:T):S =
      this.null ? zero ^ tail.select(f, f(head, zero)).
}

Below we assume the follownig static type definitions:

   static type Int(x:Int,y:Int{x<=y})   = Int{self >=x, self<=y}.
   static type Long(x:Long,y:Long{x<=y})= Long{self >=x, self<=y}.
   static type (x:Int)..(y:Int{x<=y})   = Int(X,Y).
   static type (x:Long)..(y:Long{x<=y}) = Long(X,Y).

(Note that x..y is now ambiguously a type or an expression.)
   
Map /GroupBy / Reduce computations.



This definition of prime numbers in the range 1..N checks for each candidate x whether
all the numbers from 2 to x/2 are factors. 

def prime(N:Int{self >=2}) = 
   collect all (x:2..N)
            if (all (y:2..x/2) y !% x)
              offer x.


This definition uses the Sieve of Eratosthenes to push the checking into the generator,
and only generate those numbers that are prime (i.e. do not have prime factors smaller
than themselves as factors). This shows the advantage of decoupling 
the offer statement (the generator) from the set collector, and the conditions
(these are captured via agent/goal interplay in all the sophisticated ways the 
language permits).

def prime(N:Int) = collect prime(2..N).
def prime(P:List[Int]) {
  if (P.size>1) {
    offer P.head, 
    prime(P.tail.filter((x:Int)=>x%P.head >0))
  }
}

Below we assume the following definitions.

TODO: Check if this works with the X10 parser.
We assume that a ternary operatorn _ ? _^_ has been defined thus
  static operator [T] (a:Goal)?(b:T)^(c:T):T = M where if (a) M=b else M=c.

Now various aggregators such as max and min can be defined thus. In the actual
implementation this computation will be pushed into the generator.

   def max[T](x:Agent[Offers[T]]){T <: Arithmetic[T]} = 
      collect(x).select((x,y)=>(x<y)?y^x, T.maxValue).

   def argmin[S,T](f:(S)=>T){T <: Arithmetic[T], nullable S} = 
      collect(all (x:S) offer Pair(f(x),x))
         .select((u,v)=>(u.fst<v.fst)?u^v, Pair(T.maxValue, S.null))
         .snd.

class KMeans(N:Int, P:Int, K:Int, pts:Rail[Vector(N)](P)) {
  type Vector = Rail[Double](N). 

  agent delta(A:Vector, B:Vector)= max(all(i:A.domain) offer Math.abs(A(i)-B(i))).

  agent kmeans=kmeans(collect all(i:0..(K-1)) offer pts(i) groupby i).

  agent kmeans(old:Rail[Vector](K))= {
    T = avg(all(i:0..(P-1))
           offer pts(i) groupby 
             argmin ((j:0..(K-1))=> delta(pts(i), old(j)))),
     X = delta(old, T),
     offer X < epsilon? T ^ kmeans(T)
   }
}






